#!/usr/bin/env python3
"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º–∏.
–ß–∏—Ç–∞—î –≤—Å—ñ —Ñ–∞–π–ª–∏ –∑ –≤–∏—Ö—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏ —Ç–∞ —Ä–æ–∑–ø–æ–¥—ñ–ª—è—î —ó—Ö –ø–æ –ø—ñ–¥–ø–∞–ø–∫–∞—Ö —É —Ü—ñ–ª—å–æ–≤—ñ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó.
"""

import asyncio
import aiofiles
import aiopath
import argparse
import logging
import shutil
from pathlib import Path
from typing import List

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('file_sorter.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class AsyncFileSorter:
    """–ö–ª–∞—Å –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤"""
    
    def __init__(self, source_folder: str, output_folder: str):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–æ—Ä—Ç—É–≤–∞–ª—å–Ω–∏–∫–∞ —Ñ–∞–π–ª—ñ–≤
        
        Args:
            source_folder: –®–ª—è—Ö –¥–æ –≤–∏—Ö—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏
            output_folder: –®–ª—è—Ö –¥–æ —Ü—ñ–ª—å–æ–≤–æ—ó –ø–∞–ø–∫–∏
        """
        self.source_folder = aiopath.AsyncPath(source_folder)
        self.output_folder = aiopath.AsyncPath(output_folder)
        self.files_processed = 0
        self.errors_count = 0
    
    async def ensure_output_folder_exists(self) -> None:
        """–°—Ç–≤–æ—Ä—é—î —Ü—ñ–ª—å–æ–≤—É –ø–∞–ø–∫—É —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î"""
        try:
            await self.output_folder.mkdir(parents=True, exist_ok=True)
            logger.info(f"–¶—ñ–ª—å–æ–≤–∞ –ø–∞–ø–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –∞–±–æ –≤–∂–µ —ñ—Å–Ω—É—î: {self.output_folder}")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ü—ñ–ª—å–æ–≤–æ—ó –ø–∞–ø–∫–∏ {self.output_folder}: {e}")
            raise
    
    async def get_file_extension(self, file_path: aiopath.AsyncPath) -> str:
        """
        –û—Ç—Ä–∏–º—É—î —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É
        
        Args:
            file_path: –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
            
        Returns:
            –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É (–±–µ–∑ –∫—Ä–∞–ø–∫–∏) –∞–±–æ 'no_extension'
        """
        extension = file_path.suffix.lower()
        if extension:
            return extension[1:]  # –í–∏–¥–∞–ª—è—î–º–æ –∫—Ä–∞–ø–∫—É
        return 'no_extension'
    
    async def create_extension_folder(self, extension: str) -> aiopath.AsyncPath:
        """
        –°—Ç–≤–æ—Ä—é—î –ø–∞–ø–∫—É –¥–ª—è –ø–µ–≤–Ω–æ–≥–æ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
        
        Args:
            extension: –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—É
            
        Returns:
            –®–ª—è—Ö –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ—ó –ø–∞–ø–∫–∏
        """
        extension_folder = self.output_folder / extension
        try:
            await extension_folder.mkdir(parents=True, exist_ok=True)
            logger.debug(f"–ü–∞–ø–∫–∞ –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è '{extension}' —Å—Ç–≤–æ—Ä–µ–Ω–∞: {extension_folder}")
            return extension_folder
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞–ø–∫–∏ {extension_folder}: {e}")
            raise
    
    async def copy_file(self, source_file: aiopath.AsyncPath, 
                       destination_folder: aiopath.AsyncPath) -> None:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∫–æ–ø—ñ—é—î —Ñ–∞–π–ª —É —Ü—ñ–ª—å–æ–≤—É –ø–∞–ø–∫—É
        
        Args:
            source_file: –í–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª
            destination_folder: –¶—ñ–ª—å–æ–≤–∞ –ø–∞–ø–∫–∞
        """
        try:
            destination_file = destination_folder / source_file.name
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ñ–∞–π–ª —É–∂–µ —ñ—Å–Ω—É—î
            if await destination_file.exists():
                # –î–æ–¥–∞—î–º–æ –Ω–æ–º–µ—Ä –¥–æ —ñ–º–µ–Ω—ñ —Ñ–∞–π–ª—É
                stem = source_file.stem
                suffix = source_file.suffix
                counter = 1
                
                while await destination_file.exists():
                    new_name = f"{stem}_{counter}{suffix}"
                    destination_file = destination_folder / new_name
                    counter += 1
                
                logger.info(f"–§–∞–π–ª –ø–µ—Ä–µ–π–º–µ–Ω–æ–≤–∞–Ω–æ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—É: {destination_file.name}")
            
            # –ö–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            async with aiofiles.open(source_file, 'rb') as src:
                async with aiofiles.open(destination_file, 'wb') as dst:
                    async for chunk in src:
                        await dst.write(chunk)
            
            self.files_processed += 1
            logger.info(f"–§–∞–π–ª —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ: {source_file.name} ‚Üí {destination_folder.name}/")
            
        except Exception as e:
            self.errors_count += 1
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É {source_file}: {e}")
    
    async def read_folder(self, folder_path: aiopath.AsyncPath) -> List[aiopath.AsyncPath]:
        """
        –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —á–∏—Ç–∞—î –≤—Å—ñ —Ñ–∞–π–ª–∏ —É –ø–∞–ø—Ü—ñ —Ç–∞ –ø—ñ–¥–ø–∞–ø–∫–∞—Ö
        
        Args:
            folder_path: –®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤
        """
        files = []
        
        try:
            if not await folder_path.exists():
                logger.error(f"–ü–∞–ø–∫–∞ –Ω–µ —ñ—Å–Ω—É—î: {folder_path}")
                return files
            
            if not await folder_path.is_dir():
                logger.error(f"–®–ª—è—Ö –Ω–µ —î –ø–∞–ø–∫–æ—é: {folder_path}")
                return files
            
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏
            async for item in folder_path.iterdir():
                try:
                    if await item.is_file():
                        files.append(item)
                        logger.debug(f"–ó–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª: {item}")
                    elif await item.is_dir():
                        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ä–æ–±–ª—è—î–º–æ –ø—ñ–¥–ø–∞–ø–∫–∏
                        subfolder_files = await self.read_folder(item)
                        files.extend(subfolder_files)
                        logger.debug(f"–û–±—Ä–æ–±–ª–µ–Ω–æ –ø—ñ–¥–ø–∞–ø–∫—É: {item} (–∑–Ω–∞–π–¥–µ–Ω–æ {len(subfolder_files)} —Ñ–∞–π–ª—ñ–≤)")
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –µ–ª–µ–º–µ–Ω—Ç–∞ {item}: {e}")
                    self.errors_count += 1
            
            logger.info(f"–£ –ø–∞–ø—Ü—ñ {folder_path} –∑–Ω–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª—ñ–≤")
            return files
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –ø–∞–ø–∫–∏ {folder_path}: {e}")
            return files
    
    async def process_files(self, files: List[aiopath.AsyncPath]) -> None:
        """
        –û–±—Ä–æ–±–ª—è—î —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤, –≥—Ä—É–ø—É—é—á–∏ —ó—Ö –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º–∏
        
        Args:
            files: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏
        """
        # –ì—Ä—É–ø—É—î–º–æ —Ñ–∞–π–ª–∏ –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º–∏
        extension_groups = {}
        
        for file_path in files:
            extension = await self.get_file_extension(file_path)
            if extension not in extension_groups:
                extension_groups[extension] = []
            extension_groups[extension].append(file_path)
        
        logger.info(f"–§–∞–π–ª–∏ –∑–≥—Ä—É–ø–æ–≤–∞–Ω–æ –∑–∞ {len(extension_groups)} —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º–∏")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∫–æ–∂–Ω–æ—ó –≥—Ä—É–ø–∏
        tasks = []
        for extension, group_files in extension_groups.items():
            task = self.process_extension_group(extension, group_files)
            tasks.append(task)
        
        # –í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
        await asyncio.gather(*tasks)
    
    async def process_extension_group(self, extension: str, 
                                    files: List[aiopath.AsyncPath]) -> None:
        """
        –û–±—Ä–æ–±–ª—è—î –≥—Ä—É–ø—É —Ñ–∞–π–ª—ñ–≤ –∑ –æ–¥–Ω–∞–∫–æ–≤–∏–º —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º
        
        Args:
            extension: –†–æ–∑—à–∏—Ä–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
            files: –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª—ñ–≤ –∑ —Ü–∏–º —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º
        """
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
            extension_folder = await self.create_extension_folder(extension)
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∫–æ–∂–Ω–æ–≥–æ —Ñ–∞–π–ª—É
            copy_tasks = []
            for file_path in files:
                task = self.copy_file(file_path, extension_folder)
                copy_tasks.append(task)
            
            # –í–∏–∫–æ–Ω—É—î–º–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ
            await asyncio.gather(*copy_tasks)
            
            logger.info(f"–û–±—Ä–æ–±–ª–µ–Ω–æ {len(files)} —Ñ–∞–π–ª—ñ–≤ –∑ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º '{extension}'")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≥—Ä—É–ø–∏ {extension}: {e}")
            self.errors_count += 1
    
    async def sort_files(self) -> None:
        """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤"""
        logger.info("üöÄ –ü–æ—á–∞—Ç–æ–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤")
        logger.info(f"–í–∏—Ö—ñ–¥–Ω–∞ –ø–∞–ø–∫–∞: {self.source_folder}")
        logger.info(f"–¶—ñ–ª—å–æ–≤–∞ –ø–∞–ø–∫–∞: {self.output_folder}")
        
        try:
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ü—ñ–ª—å–æ–≤—É –ø–∞–ø–∫—É
            await self.ensure_output_folder_exists()
            
            # –ß–∏—Ç–∞—î–º–æ –≤—Å—ñ —Ñ–∞–π–ª–∏ –∑ –≤–∏—Ö—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏
            logger.info("üìÅ –ß–∏—Ç–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑ –≤–∏—Ö—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏...")
            files = await self.read_folder(self.source_folder)
            
            if not files:
                logger.warning("–§–∞–π–ª–∏ –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return
            
            logger.info(f"üìÑ –ó–Ω–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª—ñ–≤ –¥–ª—è –æ–±—Ä–æ–±–∫–∏")
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ —Ñ–∞–π–ª–∏
            logger.info("‚öôÔ∏è –ü–æ—á–∞—Ç–æ–∫ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤...")
            await self.process_files(files)
            
            # –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            logger.info("‚úÖ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            logger.info(f"   –û–±—Ä–æ–±–ª–µ–Ω–æ —Ñ–∞–π–ª—ñ–≤: {self.files_processed}")
            logger.info(f"   –ü–æ–º–∏–ª–æ–∫: {self.errors_count}")
            
        except Exception as e:
            logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è: {e}")
            raise

def create_test_files(source_folder: str) -> None:
    """
    –°—Ç–≤–æ—Ä—é—î —Ç–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó
    
    Args:
        source_folder: –ü–∞–ø–∫–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
    """
    import os
    
    source_path = Path(source_folder)
    source_path.mkdir(exist_ok=True)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤
    test_files = [
        "document.txt",
        "image.jpg",
        "video.mp4",
        "audio.mp3",
        "data.csv",
        "script.py",
        "webpage.html",
        "archive.zip",
        "presentation.pptx",
        "spreadsheet.xlsx",
        "file_without_extension"
    ]
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–ø–∞–ø–∫—É –∑ –¥–æ–¥–∞—Ç–∫–æ–≤–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
    subfolder = source_path / "subfolder"
    subfolder.mkdir(exist_ok=True)
    
    subfolder_files = [
        "nested_document.docx",
        "nested_image.png",
        "nested_data.json"
    ]
    
    print("üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤...")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω—ñ–π –ø–∞–ø—Ü—ñ
    for filename in test_files:
        file_path = source_path / filename
        with open(file_path, 'w') as f:
            f.write(f"–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª: {filename}\n")
        print(f"   –°—Ç–≤–æ—Ä–µ–Ω–æ: {filename}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ–∞–π–ª–∏ –≤ –ø—ñ–¥–ø–∞–ø—Ü—ñ
    for filename in subfolder_files:
        file_path = subfolder / filename
        with open(file_path, 'w') as f:
            f.write(f"–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π —Ñ–∞–π–ª —É –ø—ñ–¥–ø–∞–ø—Ü—ñ: {filename}\n")
        print(f"   –°—Ç–≤–æ—Ä–µ–Ω–æ: subfolder/{filename}")
    
    print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ {len(test_files) + len(subfolder_files)} —Ç–µ—Å—Ç–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤")

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    parser = argparse.ArgumentParser(
        description="–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–µ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∑–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è–º–∏",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
  python async_file_sorter.py source_folder output_folder
  python async_file_sorter.py /path/to/files /path/to/sorted
  python async_file_sorter.py --create-test-files source_folder output_folder
        """
    )
    
    parser.add_argument(
        'source_folder',
        help='–®–ª—è—Ö –¥–æ –≤–∏—Ö—ñ–¥–Ω–æ—ó –ø–∞–ø–∫–∏ –∑ —Ñ–∞–π–ª–∞–º–∏'
    )
    
    parser.add_argument(
        'output_folder',
        help='–®–ª—è—Ö –¥–æ —Ü—ñ–ª—å–æ–≤–æ—ó –ø–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ä—Ç–æ–≤–∞–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤'
    )
    
    parser.add_argument(
        '--create-test-files',
        action='store_true',
        help='–°—Ç–≤–æ—Ä–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ —É –≤–∏—Ö—ñ–¥–Ω—ñ–π –ø–∞–ø—Ü—ñ –ø–µ—Ä–µ–¥ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è–º'
    )
    
    parser.add_argument(
        '--log-level',
        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR'],
        default='INFO',
        help='–†—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º: INFO)'
    )
    
    args = parser.parse_args()
    
    # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —Ä—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è
    logging.getLogger().setLevel(getattr(logging, args.log_level))
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ —Ñ–∞–π–ª–∏ —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if args.create_test_files:
            create_test_files(args.source_folder)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å–æ—Ä—Ç—É–≤–∞–ª—å–Ω–∏–∫ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î–º–æ
        sorter = AsyncFileSorter(args.source_folder, args.output_folder)
        await sorter.sort_files()
        
    except KeyboardInterrupt:
        logger.info("‚ùå –û–ø–µ—Ä–∞—Ü—ñ—é –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"üí• –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏: {e}")
        exit(1)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É –ø—Ä–æ–≥—Ä–∞–º—É
    asyncio.run(main())
